library(shiny); runApp('burden_of_COPD/app3.R')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
library(devtools)
install_github("ahill187/shinydashboard")
shiny::runApp('burden_of_COPD')
shiny::runApp('burden_of_COPD')
shiny::runApp('burden_of_COPD')
library(shiny)
library(shinythemes)
library(shinydashboard)
install.packages(shiny)
install.packages("shiny")
library(shiny)
??`library
)
''
``
``
??library
library(shiny, verbose=T)
.rs.restartR()
library(shiny)
library(shinydashboard)
runApp('burden_of_COPD')
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard")
??install_github
install_github("ahill187/shinydashboard2")
install_github("ahill187/shinydashboard2")
install_github("ahill187/shinydashboard")
install_github("ahill187/shinydashboard2", force=T)
library(shinydashboard)
runApp('burden_of_COPD')
library(shinydashboard2)
install_github("ahill187/shinydashboard2", force=T)
library(shinydashboard)
runApp('burden_of_COPD')
remove.packages("shinydashboard")
install_github("ahill187/shinydashboard2", force=T)
library(shinydashboard)
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
getOption()
getOption(1)
getOption("this")
getOption("this", T)
getOption("this=T", T)
getOption("this=F", T)
??getOption
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
??validateColor
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
devtools::document()
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
RColorBrewer::brewer.pal(4, "YlGnBu")
coul=RColorBrewer::brewer.pal(4, "YlGnBu")
coul
colorRampPalette(coul)(25)
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
install_github("ahill187/shinydashboard2", force=T)
.rs.restartR()
runApp('burden_of_COPD')
runApp('burden_of_COPD')
?eventReactive
runApp('burden_of_COPD')
runApp('burden_of_COPD')
province <- reactiveValues(default = "Canada")
province$default
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
sout <- function(...){
a = list(...)
for(arg in a){
print(a)
}
}
sout("free", "test")
sout <- function(...){
a = (...)
for(arg in a){
print(a)
}
}
sout("free", "test")
sout <- function(...){
a = list(...)
for(arg in a){
print(arg)
}
}
sout("free", "test")
sout <- function(...){
a = list(...)
for(arg in a){
cat(arg, fill=TRUE)
}
}
sout("free", "test")
a="test"
paste0(a,a)
sout <- function(...){
arguments <- list(...)
string <- ""
for(arg in arguments){
string <- paste0(string, " ", arg)
}
cat(string, fill=TRUE)
}
sout("free", "test")
is.character("free")
is.character(1)
paste0(1,"two")
paste0(list(a), "two")
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
integer(0)
a=integer(0)
is.null(a)
a
is.na(a)
length(a)
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
runApp('burden_of_COPD')
getwd()
shiny::runApp('burden_of_COPD')
??addLegend
getwd()
shiny::runApp('BurdenOfAsthma')
runApp('BurdenOfAsthma')
runApp('BurdenOfAsthma')
shiny::runApp('BurdenOfAsthma')
devtools::install_github("ahill187/googleChart")
shiny::runApp('BurdenOfAsthma')
shiny::runApp('BurdenOfAsthma')
install.packages("rgdal")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(googleChart)
library(shiny)
library(shinythemes)
library(shinydashboard2)
library(devtools)
library(ggplot2)
library(plotly)
library(scales)
library(readr)
library(rmarkdown) #for markdown file
library(knitr) #for markdown file
library(htmltools)
library(maps) # interactive map
library(mapproj)
library(leaflet)
source("./R/Census.R")
getwd()
setwd("/home/ainsleighhill/BurdenOfAsthma/")
source("./R/Census.R")
source("./R/MapData.R")
source("./R/MetaData.R")
source("./R/helper_functions.R")
source("./R/AppLayout.R")
source("./R/DashGraph.R")
source("./R/LeafletMap.R")
source("./R/LeafletMap.R")
source('./R/helper_functions.R')
source('./R/TabItemDash.R')
source('./R/MapLayer.R')
source('./R/MapLayer.R')
source("./R/LeafletMap.R")
source("./R/CountryBaseMap.R")
source("./R/CountryBaseMap.R")
runApp()
runApp()
googleChart("testing")
googleChart
??googleChart
googleChart
googleChartOutput
renderGoogleChart()
renderGoogleChart
devtools::install_github("ahill187/googleChart")
googleChart
runApp()
runApp()
runApp()
install.packages("rgdal")
runApp()
library(rgdal)
.rs.restartR()
library(rgdal)
runApp()
googleChart("testing")
